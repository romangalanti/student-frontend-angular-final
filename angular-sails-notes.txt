_____________________________________________________
Observables

https://developer.telerik.com/topics/web-development/introduction-observables-angular-developers/

You can think of an observable as an array whose items arrive asynchronously over time. 

Observables help you manage asynchronous data, such as data coming from a backend service. Observables are used within Angular itself, including Angular’s event system and its http client service. To use observables, Angular uses a third-party library called Reactive Extensions (RxJS). Observables are a proposed feature for ES 2016, the next version of JavaScript.

Observables provide support for passing messages between publishers and subscribers in your application. 

    in student.component.ts:

        getStudents() {
            this.dataService.getRecords("student")
            .subscribe(
                students => this.students = students,
                error =>  this.errorMessage = <any>error);
        }

    in data.service.ts:

        getRecords(endpoint: string): Observable<any[]> {
            console.log("endpoint: " + endpoint);
            let apiUrl = this.baseUrl+endpoint;
            console.log(apiUrl);
            return this.http.get(apiUrl)
                .map(this.extractData)
                .catch(this.handleError);
        }

Observables are declarative—that is, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.

An observable can deliver multiple values of any type—literals, messages, or events, depending on the context. The API for receiving values is the same whether the values are delivered synchronously or asynchronously. Because setup and teardown logic are both handled by the observable, your application code only needs to worry about subscribing to consume values, and when done, unsubscribing. Whether the stream was keystrokes, an HTTP response, or an interval timer, the interface for listening to values and stopping listening is the same.


_____________________________________________________
SAILS

https://sailsjs.com/

Sails is the most popular MVC framework for Node.js, designed to emulate the familiar MVC pattern of frameworks like Ruby on Rails, but with support for the requirements of modern apps: data-driven APIs with a scalable, service-oriented architecture

To install Sails:

    npm install sails -g

To generate a new app, cd into the directory where you want it to be, and type:

    sails new test-project





_____________________________________________________
USING LOCAL STORAGE

localStorage.setItem('email', student.value.email);
console.log("saveStudent() - Email is: " + student.value.email);
this.email = localStorage.getItem('email') || null;

localStorage.setItem("currentUser", JSON.stringify(recruiter))
var recruiterInfo = localStorage.getItem('currentUser');

_____________________________________________________
CONVERTING TO BOOTSTRAP 4

1. Use http://upgrade-bootstrap.bootply.com/ to convert existing BS3 HTML to BS4

2. Modify index.html to use "https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"

3. Save original Navigation Bar and Home HTML 

4. Update Navigation Bar HTML

5. Update Home HTML

6. Test Navigation Bar & Home

7. Work through the HTML for each table to verify functionality


//cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css
//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js

https://cdn.datatables.net/1.10.19/css/dataTables.bootstrap4.min.css
https://cdn.datatables.net/responsive/2.2.3/css/responsive.bootstrap4.min.css